# -*- coding: utf-8 -*-
"""Cópia de Desafio 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bstXqp-XX7Z7-L97GthGSDYjJokpMLz9

# **Setup**

Instalação de Bibliotecas
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install plotly
# %pip install cufflinks
# %pip install chart-studio

!pip install sidetable
!pip install pandas-profiling==3.3.0
!pip install scikit-learn

"""Importação das principais bilbiotecas ultilizadas"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

import chart_studio.plotly as py
import cufflinks as cf

import plotly.graph_objects as go
import plotly.express as px

import sidetable
import pandas_profiling
import missingno as msno
from ipywidgets import interact, widgets

from sklearn import datasets
from sklearn.preprocessing import scale, minmax_scale, power_transform

from sklearn.datasets import load_wine

"""Importação de Dados"""

MKT_Dados = pd.read_excel("/content/Desafio 5/Data.xlsx")

"""# **Leia o arquivo e inspecione os dados**

Leitura do dataset
"""

MKT_Dados.head()

"""Ultilização da função "describe"
"""

MKT_Dados[["InvoiceNo","StockCode","Description","Quantity","InvoiceDate","UnitPrice","CustomerID","Country"]].describe()

"""Analise dos tipos de dados"""

MKT_Dados.dtypes

MKT_Dados.info()

MKT_Dados.profile_report()

"""# **Valores faltantes na identificação do cliente**

Verificação dos valores nulos com o isna
"""

MKT_Dados.isna()

"""Utilização da função sum para a
somar a quantidade de nulos

"""

MKT_Dados.isna().sum()

"""Utilização da função dropna para remover os nulos"""

MKT_Dados.dropna(subset=["InvoiceNo","StockCode","Description","Quantity","InvoiceDate","UnitPrice","CustomerID","Country"])

"""# **Preços unitários e quantidade de produtos iguais ou inferior a 0**

Filtro para verificar se existem dados nulos ou menor que
zero na coluna de preços
"""

MKT_Dados['UnitPrice'] = pd.to_numeric(MKT_Dados['UnitPrice'], errors='coerce')

Filtro_1 = MKT_Dados[(MKT_Dados['UnitPrice'].isnull()) | (MKT_Dados['UnitPrice'] < 0)]

print(Filtro_1)

"""Filtro para mostrar o dataset apenas os preços acima de zero"""

MKT_Dados_filtrado = MKT_Dados[MKT_Dados['UnitPrice'] > 0]

print(MKT_Dados_filtrado)

"""Filtro para verificar se existem dados nulos ou menor que
zero na coluna de quantidade
"""

MKT_Dados['Quantity'] = pd.to_numeric(MKT_Dados['Quantity'], errors='coerce')

Filtro_2 = MKT_Dados[(MKT_Dados['Quantity'].isnull()) | (MKT_Dados['Quantity'] < 0)]

print(Filtro_2)

"""Dataset com quantidade acima de zero"""

MKT_Dados_filtrado_2 = MKT_Dados[MKT_Dados['Quantity'] > 0]

print(MKT_Dados_filtrado_2)

"""# **Verifique se existem linhas duplicadas**

Verificação de linhas duplicadas com a função duplicated
"""

duplicadas = MKT_Dados.duplicated()

print(duplicadas)

"""Drope de linhas duplicadas"""

MKT_Dados_sem_duplicatas = MKT_Dados.drop_duplicates()

print("\nDataFrame Sem Duplicatas:")
print(MKT_Dados_sem_duplicatas)

"""# **Tipos de dados da coluna**

Correção do tipo de dado do CustomerID e InvoiceDate
"""

MKT_Dados['CustomerID'] = pd.to_numeric(MKT_Dados['CustomerID'], errors='coerce').fillna(-1).astype(int)

MKT_Dados['InvoiceDate'] = MKT_Dados['InvoiceDate'].astype('datetime64[ns]')

MKT_Dados.dtypes

"""# **Tratando os outliers**

Visualização dos outliers
"""

MKT_Dados,_ = load_wine(return_X_y=True, as_frame=True)
print(MKT_Dados.shape)
MKT_Dados.head()

MKT_Dados.apply(scale).plot.box()
plt.xticks(rotation=60, ha='right')

"""Remoção dos outliers extremos em que a quantidade do item na compra é
superior a 10.000, e o preço unitário é maior que 5.000.
"""

MKT_Dados = pd.read_excel("/content/Desafio 5/Data.xlsx")

print("DataFrame Original:")
print(MKT_Dados)

MKT_Dados['Quantity'] = pd.to_numeric(MKT_Dados['Quantity'], errors='coerce')
MKT_Dados['UnitPrice'] = pd.to_numeric(MKT_Dados['UnitPrice'], errors='coerce')

MKT_Dados_sem_outliers = MKT_Dados[(MKT_Dados['Quantity'] <= 10000) & (MKT_Dados['UnitPrice'] <= 5000)]

print("\nDataFrame Sem Outliers Extremos:")
print(MKT_Dados_sem_outliers)

"""# **Crie uma coluna adicional**

Coluna adicional
com o preço total da compra
"""

MKT_Dados['TotalPrice'] = MKT_Dados['Quantity'] * MKT_Dados['UnitPrice']

print("\nDataFrame com a Coluna TotalPrice:")
print(MKT_Dados)

"""# **Última data**

Calcule a data da última compra no
dataset como um todo
"""

MKT_Dados['CustomerID'] = pd.to_numeric(MKT_Dados['CustomerID'], errors='coerce').fillna(-1).astype(int)

MKT_Dados['InvoiceDate'] = MKT_Dados['InvoiceDate'].astype('datetime64[ns]')

ultima_compra = MKT_Dados['InvoiceDate'].max()

print("\nData da Última Compra:")
print(ultima_compra)

"""Cálculo da recência"""

MKT_Dados['recencia'] = (ultima_compra - MKT_Dados['InvoiceDate']).dt.days

print("\nDataFrame com a Coluna de Recência:")
print(MKT_Dados)

"""# **Plotando gráficos**

Top 10 países com maior valor em vendas
"""

vendas_por_pais = MKT_Dados.groupby('Country')['TotalPrice'].sum().reset_index()

top_10_paises = vendas_por_pais.sort_values(by='TotalPrice', ascending=False).head(10)

print("\nTop 10 Países com Maior Valor em Vendas:")
print(top_10_paises)

fig = px.bar(top_10_paises, x='Country', y='TotalPrice', title='Top 10 Países com Maior Valor em Vendas', labels={'Country': 'País', 'TotalPrice': 'Valor em Vendas'})

fig.show()

"""Top 10 produtos mais vendidos"""

vendas_por_produto = MKT_Dados.groupby('Description')['Quantity'].sum().reset_index()

top_10_produtos = vendas_por_produto.sort_values(by='Quantity', ascending=False).head(10)

print("\nTop 10 Produtos Mais Vendidos:")
print(top_10_produtos)

fig = px.bar(top_10_produtos, x='Description', y='Quantity', title='Top 10 Produtos Mais Vendidos', labels={'Description': 'Produto', 'Quantity': 'Quantidade Vendida'})

fig.show()

"""Valor de venda total por mês"""

vendas_por_mes = MKT_Dados.resample('M', on='InvoiceDate')['TotalPrice'].sum().reset_index()

print("\nValor Total de Vendas por Mês:")
print(vendas_por_mes)

"""Valor de venda total por mês e por país(considere apenas os top 10)"""

top_10_paises = MKT_Dados.resample('M', on='InvoiceDate').agg({'TotalPrice': 'sum', 'Country': 'first'}).reset_index()

top_10_paises = MKT_Dados.groupby('Country')['TotalPrice'].sum().nlargest(10).index
vendas_por_mes_top_10 = vendas_por_mes[vendas_por_mes['Country'].isin(top_10_paises)]

MKT_Dados_agregado = MKT_Dados.groupby([vendas_por_mes_top_10['InvoiceDate'].dt.year, 'Country'])['TotalPrice'].sum().reset_index(name='TotalPriceSum')

print(MKT_Dados_agregado)

"""# **Cálculo do RFM**

Agrupamento dos dados por cliente e pedido/compra (InvoiceNo) e
obtenção da data e o preço total do pedido.
"""

MKT_Dados_agregado = MKT_Dados.groupby(['CustomerID', 'InvoiceNo']).agg({'InvoiceDate': 'first', 'TotalPrice': 'sum'}).reset_index()

print(MKT_Dados_agregado)

"""Agrupamento apenas por cliente"""

MKT_Dados_agregado_cliente = MKT_Dados.groupby('CustomerID')['TotalPrice'].sum().reset_index()

print(MKT_Dados_agregado_cliente)

"""**Calculo do RFM**

Recência
"""

MKT_Dados['recencia'] = (ultima_compra - MKT_Dados['InvoiceDate']).dt.days

print("\nDataFrame com a Coluna de Recência:")
print(MKT_Dados)

"""Frequência"""

frequencia_compras = MKT_Dados.groupby('CustomerID')['InvoiceNo'].count().reset_index()
frequencia_compras.columns = ['CustomerID', 'FrequênciaCompras']

print(frequencia_compras)

"""Ticket Médio"""

resumo_cliente = MKT_Dados.groupby('CustomerID').agg({'TotalPrice': 'sum', 'InvoiceNo': 'count'}).reset_index()

resumo_cliente.columns = ['CustomerID', 'TotalCompras', 'FrequênciaCompras']

resumo_cliente = MKT_Dados.groupby('CustomerID').agg({'TotalPrice': 'sum', 'InvoiceNo': 'count'}).reset_index()
resumo_cliente.columns = ['CustomerID', 'TotalCompras', 'FrequênciaCompras']

resumo_cliente['TicketMédio'] = resumo_cliente['TotalCompras'] / resumo_cliente['FrequênciaCompras']
print(resumo_cliente[['CustomerID', 'TicketMédio']])
